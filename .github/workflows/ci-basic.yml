name: CI - Basic Validation

on:
    push:
        branches:
            - main
            - develop
            - "feature/**"
    pull_request:
        branches:
            - main
            - develop

env:
    NODE_ENV: test

jobs:
    # Job 1: Validar estructura del monorepo
    validate-structure:
        name: Validate Monorepo Structure
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Check required directories
              run: |
                  echo "Validating monorepo structure..."
                  test -d services/orders-service && echo "‚úÖ Orders Service exists"
                  test -d services/inventory-service && echo "‚úÖ Inventory Service exists"
                  test -d docs && echo "‚úÖ Docs directory exists"
                  test -d docs/adr && echo "‚úÖ ADR directory exists"
                  echo "‚úÖ Monorepo structure is valid"

            - name: Check documentation files
              run: |
                  echo "Checking documentation..."
                  test -f README.md && echo "‚úÖ README.md exists"
                  test -f docs/PROJECT_BACKLOG.md && echo "‚úÖ PROJECT_BACKLOG.md exists"
                  test -f docs/adr/026-api-gateway-express-custom.md && echo "‚úÖ ADR-026 exists"
                  echo "‚úÖ Documentation files present"

    # Job 2: Orders Service - Estructura b√°sica
    orders-service-basic:
        name: Orders Service - Basic Checks
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./services/orders-service
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Check Orders Service structure
              run: |
                  echo "Validating Orders Service structure..."
                  test -f package.json && echo "‚úÖ package.json exists"
                  test -f tsconfig.json && echo "‚úÖ tsconfig.json exists"
                  test -f .eslintrc.json && echo "‚úÖ .eslintrc.json exists"
                  test -f jest.config.js && echo "‚úÖ jest.config.js exists"
                  test -d src && echo "‚úÖ src/ directory exists"
                  test -d test && echo "‚úÖ test/ directory exists"
                  echo "‚úÖ Orders Service structure is valid"

            - name: Validate package.json
              run: |
                  echo "Checking package.json..."
                  if command -v jq &> /dev/null; then
                    jq -r '.scripts | keys[]' package.json
                  else
                    echo "Scripts found in package.json"
                  fi

    # Job 3: Inventory Service - Validar estructura Go
    inventory-service-basic:
        name: Inventory Service - Basic Checks
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./services/inventory-service
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version: "1.21"
                  cache-dependency-path: services/inventory-service/go.sum

            - name: Check Go files
              run: |
                  echo "Checking Go project structure..."
                  test -f go.mod && echo "‚úÖ go.mod exists"
                  test -f Makefile && echo "‚úÖ Makefile exists"
                  test -d cmd && echo "‚úÖ cmd/ directory exists"
                  test -d internal && echo "‚úÖ internal/ directory exists"

            - name: Download dependencies
              run: go mod download

            - name: Verify dependencies
              run: go mod verify

            - name: Check Go formatting
              run: |
                  if [ -n "$(gofmt -l .)" ]; then
                    echo "‚ö†Ô∏è Go files need formatting:"
                    gofmt -l .
                    exit 1
                  else
                    echo "‚úÖ All Go files are properly formatted"
                  fi

            - name: Run go vet
              run: go vet ./...

    # Job 4: Final summary
    summary:
        name: CI Summary
        runs-on: ubuntu-latest
        needs:
            [validate-structure, orders-service-basic, inventory-service-basic]
        if: always()
        steps:
            - name: Check results
              run: |
                  echo "üìä CI Pipeline Summary"
                  echo "======================"
                  echo "Structure validation: ${{ needs.validate-structure.result }}"
                  echo "Orders Service: ${{ needs.orders-service-basic.result }}"
                  echo "Inventory Service: ${{ needs.inventory-service-basic.result }}"

                  if [ "${{ needs.validate-structure.result }}" == "success" ] && \
                     [ "${{ needs.orders-service-basic.result }}" == "success" ] && \
                     [ "${{ needs.inventory-service-basic.result }}" == "success" ]; then
                    echo "‚úÖ All checks passed!"
                    exit 0
                  else
                    echo "‚ùå Some checks failed"
                    exit 1
                  fi
