name: CI - Inventory Service (Go)

on:
    push:
        branches:
            - main
            - develop
            - "feature/**"
        paths:
            - "services/inventory-service/**"
            - ".github/workflows/inventory-service-ci.yml"
    pull_request:
        branches:
            - main
            - develop
        paths:
            - "services/inventory-service/**"
            - ".github/workflows/inventory-service-ci.yml"

env:
    GO_VERSION: "1.21"
    WORKING_DIR: ./services/inventory-service

jobs:
    # ============================================================================
    # Job 1: Build & Unit Tests
    # ============================================================================
    build-and-test:
        name: Build & Unit Tests
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./services/inventory-service

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}
                  cache: true
                  cache-dependency-path: services/inventory-service/go.sum

            - name: Download dependencies
              run: go mod download

            - name: Verify dependencies
              run: go mod verify

            - name: Build application
              run: |
                  echo "🔨 Building Inventory Service..."
                  go build -v -o bin/inventory-service cmd/api/main.go
                  echo "✅ Build successful"

            - name: Run unit tests
              run: |
                  echo "🧪 Running unit tests..."
                  go test ./internal/... -v -race -short -coverprofile=coverage.out
                  echo "✅ Unit tests passed"

            - name: Generate coverage report
              run: |
                  echo "📊 Generating coverage report..."
                  go tool cover -func=coverage.out | tee coverage.txt
                  COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
                  echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
                  echo "📈 Total coverage: ${COVERAGE}%"

            - name: Check coverage threshold
              run: |
                  THRESHOLD=70
                  if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
                    echo "❌ Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
                    exit 1
                  else
                    echo "✅ Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
                  fi

            - name: Upload coverage artifact
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-report
                  path: services/inventory-service/coverage.out
                  retention-days: 7

    # ============================================================================
    # Job 2: Integration Tests (with Testcontainers)
    # ============================================================================
    integration-tests:
        name: Integration Tests
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./services/inventory-service

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}
                  cache: true
                  cache-dependency-path: services/inventory-service/go.sum

            - name: Download dependencies
              run: go mod download

            - name: Run integration tests
              run: |
                  echo "🔗 Running integration tests with Testcontainers..."
                  go test ./tests/integration/... -v -race -timeout 5m
                  echo "✅ Integration tests passed"

    # ============================================================================
    # Job 3: Linting (golangci-lint)
    # ============================================================================
    lint:
        name: Linting & Code Quality
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./services/inventory-service

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}
                  cache: true
                  cache-dependency-path: services/inventory-service/go.sum

            - name: Download dependencies
              run: go mod download

            - name: Run golangci-lint
              uses: golangci/golangci-lint-action@v6
              with:
                  version: latest
                  working-directory: services/inventory-service
                  args: --timeout=5m --config=.golangci.yml

            - name: Check Go formatting
              run: |
                  echo "🎨 Checking Go formatting..."
                  UNFORMATTED=$(gofmt -l .)
                  if [ -n "$UNFORMATTED" ]; then
                    echo "❌ The following files need formatting:"
                    echo "$UNFORMATTED"
                    exit 1
                  else
                    echo "✅ All files are properly formatted"
                  fi

            - name: Run go vet
              run: |
                  echo "🔍 Running go vet..."
                  go vet ./...
                  echo "✅ go vet passed"

    # ============================================================================
    # Job 4: Security Scan (gosec)
    # ============================================================================
    security:
        name: Security Scan
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./services/inventory-service

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}
                  cache: true
                  cache-dependency-path: services/inventory-service/go.sum

            - name: Run gosec security scanner
              uses: securego/gosec@master
              with:
                  args: "-no-fail -fmt sarif -out results.sarif ./..."

            - name: Upload SARIF file
              if: always()
              uses: github/codeql-action/upload-sarif@v3
              with:
                  sarif_file: results.sarif

    # ============================================================================
    # Job 5: Summary & Status
    # ============================================================================
    summary:
        name: CI Summary
        runs-on: ubuntu-latest
        needs: [build-and-test, integration-tests, lint, security]
        if: always()

        steps:
            - name: Check results
              run: |
                  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                  echo "📊 CI Pipeline Summary - Inventory Service"
                  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                  echo ""
                  echo "Build & Tests:      ${{ needs.build-and-test.result }}"
                  echo "Integration Tests:  ${{ needs.integration-tests.result }}"
                  echo "Linting:            ${{ needs.lint.result }}"
                  echo "Security Scan:      ${{ needs.security.result }}"
                  echo ""
                  
                  if [ "${{ needs.build-and-test.result }}" == "success" ] && \
                     [ "${{ needs.integration-tests.result }}" == "success" ] && \
                     [ "${{ needs.lint.result }}" == "success" ] && \
                     [ "${{ needs.security.result }}" == "success" ]; then
                    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                    echo "✅ All checks passed! Pipeline successful."
                    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                    exit 0
                  else
                    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                    echo "❌ Some checks failed. Please review."
                    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                    exit 1
                  fi

            - name: Post summary to PR
              if: github.event_name == 'pull_request'
              uses: actions/github-script@v7
              with:
                  script: |
                      const summary = `
                      ## 🚀 Inventory Service CI Results
                      
                      | Check | Status |
                      |-------|--------|
                      | Build & Tests | ${{ needs.build-and-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |
                      | Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
                      | Linting | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |
                      | Security Scan | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} |
                      
                      **Coverage:** \`${{ env.COVERAGE }}%\` (threshold: 70%)
                      `;
                      
                      github.rest.issues.createComment({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          body: summary
                      });
