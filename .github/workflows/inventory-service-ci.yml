name: Inventory Service CI

on:
    push:
        branches:
            - main
            - develop
            - "feature/**"
        paths:
            - "services/inventory-service/**"
            - ".github/workflows/inventory-service-ci.yml"
    pull_request:
        branches:
            - main
            - develop
        paths:
            - "services/inventory-service/**"

env:
    GO_VERSION: "1.21"
    WORKING_DIR: ./services/inventory-service

jobs:
    # Job 1: Linting and Code Quality
    lint:
        name: Lint and Format Check
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ${{ env.WORKING_DIR }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}
                  cache: true
                  cache-dependency-path: ${{ env.WORKING_DIR }}/go.sum

            - name: Install golangci-lint
              run: |
                  curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

            - name: Run golangci-lint
              run: |
                  $(go env GOPATH)/bin/golangci-lint run --timeout=5m --config=.golangci.yml

            - name: Check Go formatting
              run: |
                  if [ -n "$(gofmt -l .)" ]; then
                    echo "Go files are not formatted. Please run 'gofmt -w .'"
                    gofmt -l .
                    exit 1
                  fi

            - name: Go vet
              run: go vet ./...

            - name: Check Go mod tidy
              run: |
                  go mod tidy
                  git diff --exit-code go.mod go.sum

    # Job 2: Security Audit
    security:
        name: Security Audit
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ${{ env.WORKING_DIR }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}
                  cache: true
                  cache-dependency-path: ${{ env.WORKING_DIR }}/go.sum

            - name: Run govulncheck
              run: |
                  go install golang.org/x/vuln/cmd/govulncheck@latest
                  govulncheck ./...

            - name: Run gosec security scanner
              run: |
                  go install github.com/securego/gosec/v2/cmd/gosec@latest
                  gosec -fmt=json -out=gosec-report.json ./...
              continue-on-error: true

            - name: Upload gosec report
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: gosec-report
                  path: ${{ env.WORKING_DIR }}/gosec-report.json

    # Job 3: Unit Tests
    test-unit:
        name: Unit Tests
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ${{ env.WORKING_DIR }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}
                  cache: true
                  cache-dependency-path: ${{ env.WORKING_DIR }}/go.sum

            - name: Download dependencies
              run: go mod download

            - name: Run unit tests
              run: go test -v -race -short -coverprofile=coverage-unit.out -covermode=atomic ./...

            - name: Generate coverage report
              run: go tool cover -html=coverage-unit.out -o coverage-unit.html

            - name: Upload unit test coverage
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-unit
                  path: |
                      ${{ env.WORKING_DIR }}/coverage-unit.out
                      ${{ env.WORKING_DIR }}/coverage-unit.html

            - name: Check coverage threshold
              run: |
                  COVERAGE=$(go tool cover -func=coverage-unit.out | grep total | awk '{print $3}' | sed 's/%//')
                  echo "Coverage: $COVERAGE%"
                  if (( $(echo "$COVERAGE < 70" | bc -l) )); then
                    echo "‚ùå Coverage $COVERAGE% is below threshold of 70%"
                    exit 1
                  fi
                  echo "‚úÖ Coverage $COVERAGE% meets threshold of 70%"

    # Job 4: Integration Tests
    test-integration:
        name: Integration Tests
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ${{ env.WORKING_DIR }}

        services:
            postgres:
                image: postgres:15-alpine
                env:
                    POSTGRES_PASSWORD: test_password
                    POSTGRES_USER: test_user
                    POSTGRES_DB: microservices_test
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5433:5432

            redis:
                image: redis:7-alpine
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 6380:6379

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}
                  cache: true
                  cache-dependency-path: ${{ env.WORKING_DIR }}/go.sum

            - name: Download dependencies
              run: go mod download

            - name: Wait for PostgreSQL
              run: |
                  timeout 30s bash -c 'until nc -z localhost 5433; do sleep 1; done'

            - name: Wait for Redis
              run: |
                  timeout 30s bash -c 'until nc -z localhost 6380; do sleep 1; done'

            - name: Run integration tests
              env:
                  DB_HOST: localhost
                  DB_PORT: 5433
                  DB_USER: test_user
                  DB_PASSWORD: test_password
                  DB_NAME: microservices_test
                  REDIS_HOST: localhost
                  REDIS_PORT: 6380
              run: go test -v -race -coverprofile=coverage-integration.out -covermode=atomic ./tests/integration/...

            - name: Upload integration test coverage
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-integration
                  path: ${{ env.WORKING_DIR }}/coverage-integration.out

    # Job 5: Build Application
    build:
        name: Build Application
        runs-on: ubuntu-latest
        needs: [lint, security]
        defaults:
            run:
                working-directory: ${{ env.WORKING_DIR }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}
                  cache: true
                  cache-dependency-path: ${{ env.WORKING_DIR }}/go.sum

            - name: Download dependencies
              run: go mod download

            - name: Build application
              run: go build -v -o bin/inventory-service ./cmd/api

            - name: Verify binary
              run: |
                  if [ ! -f bin/inventory-service ]; then
                    echo "‚ùå Binary not created"
                    exit 1
                  fi
                  echo "‚úÖ Binary created successfully"
                  ls -lh bin/inventory-service

            - name: Upload build artifact
              uses: actions/upload-artifact@v4
              with:
                  name: inventory-service-binary
                  path: ${{ env.WORKING_DIR }}/bin/inventory-service

    # Job 6: Quality Gate
    quality-gate:
        name: Quality Gate
        runs-on: ubuntu-latest
        needs: [test-unit, test-integration, build]

        steps:
            - name: Download unit coverage
              uses: actions/download-artifact@v4
              with:
                  name: coverage-unit

            - name: Download integration coverage
              uses: actions/download-artifact@v4
              with:
                  name: coverage-integration

            - name: Quality Gate Summary
              run: |
                  echo "‚úÖ All quality gates passed for Inventory Service:"
                  echo "- Linting: golangci-lint clean"
                  echo "- Formatting: gofmt formatted"
                  echo "- Go vet: No issues"
                  echo "- Security: govulncheck + gosec passed"
                  echo "- Unit Tests: All passing with coverage >70%"
                  echo "- Integration Tests: All passing"
                  echo "- Build: Successful compilation"

    # Job 7: Notification
    notify:
        name: Notification
        runs-on: ubuntu-latest
        needs: [quality-gate]
        if: always()

        steps:
            - name: Notify result
              run: |
                  if [ "${{ needs.quality-gate.result }}" == "success" ]; then
                    echo "üéâ Inventory Service CI completed successfully!"
                  else
                    echo "‚ùå Inventory Service CI failed!"
                  fi
                  echo "Branch: ${{ github.ref_name }}"
                  echo "Commit: ${{ github.sha }}"
