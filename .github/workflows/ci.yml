name: Orders Service CI

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
    paths:
      - 'services/orders-service/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'services/orders-service/**'

env:
  NODE_ENV: test
  WORKING_DIR: ./services/orders-service

jobs:
  # Job 1: Linting and Code Quality
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

      - name: TypeScript type checking
        run: npm run type-check

  # Job 2: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm run ci:security
        continue-on-error: true

  # Job 3: Tests with Matrix Strategy
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    strategy:
      matrix:
        node-version: [18]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Wait for PostgreSQL
        run: |
          timeout 30s bash -c 'until nc -z localhost 5432; do sleep 1; done'

      - name: Wait for Redis
        run: |
          timeout 30s bash -c 'until nc -z localhost 6379; do sleep 1; done'

      - name: Run database migrations
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: test_db
          DATABASE_USERNAME: test_user
          DATABASE_PASSWORD: test_password
          DATABASE_USER: test_user
        run: npm run migration:run

      - name: Run unit tests with coverage
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: test_db
          DATABASE_USERNAME: test_user
          DATABASE_PASSWORD: test_password
          DATABASE_USER: test_user
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-for-testing
          ENCRYPTION_KEY: test-encryption-key-32-characters
        run: npm run test:cov

      - name: Run E2E tests
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: test_db
          DATABASE_USERNAME: test_user
          DATABASE_PASSWORD: test_password
          DATABASE_USER: test_user
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-for-testing
          ENCRYPTION_KEY: test-encryption-key-32-characters
        run: npm run test:e2e

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ${{ env.WORKING_DIR }}/coverage/
          retention-days: 7

  # Job 4: Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, security]
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: ${{ env.WORKING_DIR }}/dist/
          retention-days: 7

  # Job 5: Quality Gate Check
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, build]
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Quality Gate Summary
        run: |
          echo "‚úÖ All quality gates passed:"
          echo "- Linting: ESLint clean"
          echo "- Formatting: Prettier formatted"
          echo "- Types: TypeScript compilation successful"
          echo "- Security: No critical vulnerabilities"
          echo "- Tests: All unit tests passing"
          echo "- E2E Tests: All end-to-end tests passing"
          echo "- Coverage: Above threshold (71%)"
          echo "- Build: Successful compilation"

  # Job 6: Notification on Success
  notify-success:
    name: Success Notification
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: success()
    steps:
      - name: Notify success
        run: |
          echo "üéâ CI Pipeline completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "All quality gates passed ‚úÖ"

  # Job 7: Notification on Failure
  notify-failure:
    name: Failure Notification
    runs-on: ubuntu-latest
    needs: [lint, security, test, build, quality-gate]
    if: failure()
    steps:
      - name: Notify failure
        run: |
          echo "‚ùå CI Pipeline failed!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Please check the failed jobs above."
